-- | Este módulo define funções comuns da Tarefa 2 do trabalho prático.
module Tarefa1_2019li1g009 where

import LI11920
import System.Random

-- * Testes

-- | Testes unitários da Tarefa 1.
--
-- Cada teste é um triplo (/número de 'Pista's/,/comprimento de cada 'Pista' do 'Mapa'/,/semente de aleatoriedades/).
testesT1 :: [(Int,Int,Int)]
testesT1 = undefined

-- * Funções pré-definidas da Tarefa 1.
geraAleatorios :: Int -> Int -> [Int]
geraAleatorios n seed = take n (randomRs (0,9) (mkStdGen seed))


-- * Funções principais da Tarefa 1.
gera :: Int -> Int -> Int -> Mapa
gera npistas comprimento semente = undefined
-- geraAleatorios (2*npistas*(comprimento-1)) semente



-- Função que divide a lista em pares
dividePar :: [Int] -> [(Int,Int)]
dividePar [] = []
dividePar (x:y:xs) = (x,y):(dividePar xs)



-- Divide a lista de pares em lista de lista de pares, de modo a formar pistas
dividePista :: [(Int,Int)] -> Int -> [[(Int,Int)]]
dividePista [] comprimento= []
dividePista (x:y) comprimento = (dividePistaAux1 (x:y) comprimento):(dividePista retirar comprimento)
 where retirar = (drop (length (dividePistaAux1 (x:y) comprimento)) (x:y))

-- Remove 1 unidade ao comprimento, dado que a primeira peça já está definida
dividePistaAux1 :: [(Int,Int)] -> Int -> [(Int,Int)]
dividePistaAux1 l 0 = []
dividePistaAux1 [] comprimento = []
dividePistaAux1 l comprimento = (dividePistaAux l (comprimento-1))

-- Forma uma pista
dividePistaAux :: [(Int,Int)] -> Int -> [(Int,Int)]
dividePistaAux l 0 = []
dividePistaAux [] comprimento = []
dividePistaAux ((x,y):ys) (comprimento) = (x,y):(dividePistaAux ys (comprimento-1))



-- Adiciona (0,0), que é a primeira peça de uma pista, às várias pistas.
adicionaZeroPista :: [[(Int,Int)]] -> [[(Int,Int)]]
adicionaZeroPista [] = [[(0,0)]]
adicionaZeroPista [l] = [[(0,0)]++l]
adicionaZeroPista (((a,b):xs):(h:t)) = [[(0,0)]++((a,b):xs)]++(adicionaZeroPista (h:t))


-- Define as peças
peca :: [[(Int,Int)]] -> [[Peca]]
peca [[]] = []
peca ([]:[m]) = peca [m]
peca ([l]:[m]) = (pisotipo [l]):(peca [m])

pisotipo :: [Int] -> [Peca]
pisotipo [] = []
pisotipo ((0,0):xs) = pisotipoAux (Recta Terra 0):xs

pisotipoAux :: [a] -> [Peca]
pisotipoAux [] = []
pisotipoAux (a,b) = [Recta Terra 0]
pisotipoAux (a,b):(x,y):xs =
    | a==0 || a==1 = if b>=
    