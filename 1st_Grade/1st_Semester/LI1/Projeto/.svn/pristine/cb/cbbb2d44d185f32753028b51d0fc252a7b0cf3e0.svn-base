-- | Este módulo define funções comuns da Tarefa 6 do trabalho prático.
module Tarefa6_2019li1g009 where

import LI11920
import Tarefa0_2019li1g009
import Tarefa1_2019li1g009
import Tarefa2_2019li1g009
import Tarefa3_2019li1g009


-- * Funções principais da Tarefa 6.

-- | Define um ro'bot' capaz de jogar autonomamente o jogo.
bot :: Int          -- ^ O identificador do 'Jogador' associado ao ro'bot'.
    -> Estado       -- ^ O 'Estado' para o qual o ro'bot' deve tomar uma decisão.
    -> Maybe Jogada -- ^ Uma possível 'Jogada' a efetuar pelo ro'bot'.
bot x (Estado mapa jogadores) 
    | estaMorto x jogadores = Nothing
    | estAr x jogadores =
        if inclinacao x jogadores > (-15)
        then Just (Movimenta D)
        else if inclinacao x jogadores < (-15)
             then Just (Movimenta E)
             else Just (Movimenta D) 
    | estaChao x jogadores =
        if (parteA-parteB)==0
        then if dispara x jogadores
             then Just Dispara
             else Just Acelera
        else if segundamelhor parteA (parteA-parteB) (distancia parte) mapa
             then Just (jogar (parteA) (parteC))
             else Just Acelera

 where parte = (qualjogador x jogadores)
       parteA = pista parte
       dP = (distancia parte)
       parteB = melhorPeca dP mapa
       parteC = melhorPeca dP (findPerrada (parteA) (parteA-parteB) dP mapa)


-- | Função que se divide em várias funções, de modo a descobrir se o bot pode disparar.
dispara :: Int -- ^ Identificador do bot
        -> [Jogador] -- ^ Lista de jogadores
        -> Bool
dispara x (h:t) = verifica pJ dJ cJ (eliminaJog x (h:t))
 
 where pJ = (pista (qualjogador x (h:t)))
       dJ = (distancia (qualjogador x (h:t)))
       cJ = (cola (qualjogador x (h:t)))


-- | Função que verifica se o bot tem algum adversário atrás de si.
verifica :: Int -- ^ Pista do bot
         -> Double -- ^ Distância do bot
         -> Int -- ^ Cola do bot
         -> [Jogador] -- ^ Lista de jogadores
         -> Bool
verifica pj dj cj [] = False
verifica pj dj cj (x:xs)
    | (dist dj (x:xs)) && (pist pj (x:xs)) && cj>0 = True
    | otherwise = False


-- | Função que verifica se o bot possui cola
cola :: Jogador -- ^ Bot
     -> Int
cola (Jogador _ _ _ cj _) = cj


-- | Função que verifica se algum adversário tem o bot tem um adversário com diferença de distãncia igual ou inferior a 1 à sua.
dist :: Double -- ^ Distância do bot
     -> [Jogador] -- ^ Lista de Jogadores
     -> Bool
dist d [] = False
dist d ((Jogador _ dj _ _ _):xs) 
    | d-dj<=1 = True
    | otherwise = dist d xs


-- | Função que verifica se algum adversário está na mesma pista que o bot.
pist :: Int -- ^ Pista do bot
     -> [Jogador] -- ^ Lista de Jogadores
     -> Bool
pist p [] = False
pist p ((Jogador pj _ _ _ _):xs)
    | p==pj = True
    | otherwise = pist p xs


-- | Função que elimina o bot da lista de jogadores, para a função "verifica".
eliminaJog :: Int -- ^ Identificador do bot
           -> [Jogador] -- ^ Lista de jogadores
           -> [Jogador] -- ^ Nova lista de jogadores
eliminaJog x [] = []
eliminaJog x (h:t) 
    | x==0 = t
    | otherwise = h:(eliminaJog (x-1) t)


-- | Função que determina se existe uma segunda melhor opção.
segundamelhor :: Int -- ^ Pista do bot
              -> Int -- ^ Subtração da pista do jogador com a pista com a melhor peça
              -> Double -- ^ Distância do bot
              -> Mapa 
              -> Bool
segundamelhor pj x dj m 
    | (altpos pj x dj m) == False = segundamelhor pj (pj-parte1) dj newmapa
    | otherwise = True
 
 where parte1 = (melhorPeca dj newmapa)
       newmapa = (findPerrada pj x dj m)


-- | Função que encontra as pistas que não servem para comparar, para o bot ir para a melhor peça.
findPerrada :: Int -- ^ Pista do bot
            -> Int -- ^ Subtração da pista do jogador com a pista com a melhor peça
            -> Double -- ^ Distância do bot
            -> Mapa -- ^ Mapa inicial
            -> Mapa -- ^ Novo mapa
findPerrada pj x dj m
    | x<(-1) = if altpos pj (x+1) dj m == False
               then findPerrada pj (x+1+1) dj m
               else eliminaPista [(pj-x)..((findnpistas m)-1)] m
    | x==(-1) = eliminaPista [(pj+1)..((findnpistas m)-1)] m
    | x==1 = eliminaPista [1..(pj-1)] m
    | x>1 = if altpos pj (x-1) dj m == False
            then findPerrada (pj-1-1) (x-1-1) dj m
            else eliminaPista [1..(pj-x)] m


-- | Função que elimina as pistas que não servem para o bot se deslocar.
eliminaPista :: [Int] -- ^ Lista de números que representam as pistas que vão ser eliminadas
             -> Mapa -- ^ Mapa inicial
             -> Mapa -- ^ Novo mapa
eliminaPista [] mapa = mapa
eliminaPista _ [] = []
eliminaPista (x:xs) ((h:t):ts) 
    | x==0 = []
    | otherwise = (h:t):(eliminaPista (subt (x:xs)) ts) 


-- | Função que subtrai uma unidade à lista das pistas que vão ser eliminadas.
subt :: [Int] -- ^ Lista de números que representam as pistas que vão ser eliminadas
     -> [Int] -- ^ Nova lista de números que representam as pistas que vão ser eliminadas
subt (x:xs) = (x-1):(subt xs)


-- | Função que compara as alturas das peças, de modo a saber se o bot consegue deslocar-se.
altpos :: Int -- ^ Pista do bot
       -> Int -- ^ Subtração da pista do jogador com a pista com a melhor peça
       -> Double -- ^ Distância do bot
       -> Mapa 
       -> Bool
altpos pj x dj m  
    | x==0 = True
    | x==1 = if difAlt1 >= (-0.2)
             then True else False
    | x==(-1) = if difALt2 >= (-0.2)
                then True else False
    | x>1 = if abs difAlt1 <= (0.2)
            then altpos (pj-1) (x-1) dj m else False
    | x<(-1) = if abs difALt2 <= (0.2)
               then altpos (pj+1) (x+1) dj m else False
 
 where difAlt1 = (difAlt11 -difAlt111)
       difALt2 = (difAlt22-difAlt222)
       difAlt11 =(altu (whereu pj dj m)) (dj-(fromIntegral (floor dj)))
       difAlt111 = (altu (whereu (pj-1) dj m) (dj-(fromIntegral (floor dj))))
       difAlt22 = (altu (whereu pj dj m)) (dj-(fromIntegral (floor dj)))
       difAlt222 = (altu (whereu (pj+1) dj m) (dj-(fromIntegral (floor dj))))


-- | Função que define a altura do bot, de acordo com a sua distância e peça.
altu :: Peca -- ^ Peça definida
     -> Double -- ^ Distância do bot
     -> Double
altu (Recta piso x) _ = (fromIntegral x)
altu (Rampa piso x y) dj
    | dj == 0 = (fromIntegral x)
    | dj == 1 = (fromIntegral y)
    | x>y = ((fromIntegral x)-(fromIntegral y))*(1.0-dj)+(fromIntegral y)
    | otherwise = ((fromIntegral y)-(fromIntegral x))*(1.0-dj)+(fromIntegral x)


-- | Função que dá a distância do bot.
distancia :: Jogador -- ^ Bot 
          -> Double
distancia (Jogador _ dj _ _ _) = dj


-- | Função que diz em que peça é que o bot está.
whereu :: Int -- ^ Pista do bot
       -> Double -- ^ Distância do bot
       -> Mapa 
       -> Peca
whereu pj dj [] = (Recta Terra 0)
whereu pj dj ((x:xs):t)
    | pj==0 && dj<1 = x
    | pj==0 && dj>=1 = whereu pj (dj-1) ((xs):t)
    | otherwise = whereu (pj-1) dj t


-- | Função que dá a pista em que o bot se localiza.
pista :: Jogador -- ^ Bot
      -> Int
pista (Jogador pj _ _ _ _) = pj


-- | Função que tira o primeiro elemento da lista, para a função auxiliar.
valormenor :: [Int] -- ^ Lista de números associados aos valores dos pisos
           -> Int
valormenor (x:xs) = valormenorAux x xs


-- | Função que descobre o menor valor da pista.
valormenorAux :: Int -- ^ Primeiro valor retirado
              -> [Int] -- ^ Restantes valores
              -> Int -- ^ Menor valor
valormenorAux x [] = x
valormenorAux x (h:t) 
    | x>h = valormenorAux h t
    | otherwise = valormenorAux x t

-- | Função que dá um valor.
-- Se for menor que zero, o bot tem de ir para a pista abaixo;
-- Se for igual a zero, o bot está na pista com a melhor peça;
-- Se for maior que zero, então o bot tem de ir para a pista acima.
jogar :: Int -- ^ Pista do bot 
      -> Int -- ^ Pista com melhor peça
      -> Jogada
jogar pj x 
    | (pj-x)<0 = (Movimenta B)
    | (pj-x)==0 = (Acelera)
    | otherwise = (Movimenta C)


-- | Função que dá a inclinação do bot.
inclinacao :: Int -- ^ Identificador do Jogador 
           -> [Jogador] -- ^ Lista de Jogadores
           -> Double -- ^ Inclinação
inclinacao x ((Jogador _ _ _ _ (Ar _ ij _)):xs)
    | x==0 = ij
    | otherwise = inclinacao (x-1) xs


-- | FUnção que verifica se o bot está no Ar.
estAr :: Int -> [Jogador] -> Bool
estAr x ((Jogador _ _ _ _ (Ar _ _ _)):xs)
    | x==0 = True
    | otherwise = estAr (x-1) xs
estAr x (h:t)
    | x==0 = False
    | otherwise = estAr (x-1) t
estAr x [] = False


-- | Função que verifica se o bot está Morto.
estaMorto :: Int -- ^ Identificador do bot
             -> [Jogador] -- ^ Lista de jogadores
             -> Bool 
estaMorto x ((Jogador _ _ _ _ (Morto _)):xs)
    | x==0 = True
    | otherwise = estaMorto (x-1) xs
estaMorto x ((Jogador _ _ _ _ _):xs)
    | x==0 = False
    | otherwise = estaMorto (x-1) xs
estaMorto x [] = False


-- | Função que dá o bot, de acordo com o identificador.
qualjogador :: Int -- ^ Identificador do bot 
            -> [Jogador] -- ^ Lista de jogadores
            -> Jogador -- ^ Bot
qualjogador x (h:t) 
 | x==0 = h
 | otherwise = qualjogador (x-1) t


-- | Função que encontra a melhor peça para o bot.
-- Escolhe a peça da pista acima, da própria pista ou da pista abaixo.
melhorPeca :: Double -- ^ Distância do bot
           -> Mapa
           -> Int  -- ^ Pista para onde ele se tem de movimentar
melhorPeca dj ((x:xs):t) = encontrapeca (valormenor atribvalores) atribvalores
 where truemapa = elimina dj ((x:xs):t)
       firstpecas = map head truemapa
       atribvalores = map valo firstpecas


-- | Função que desfaz o mapa em pistas.
elimina :: Double -- ^ Distância do jogador 
        -> Mapa 
        -> Mapa
elimina dj [] = []
elimina dj ((x:xs):t) = (eliminaAux dj (x:xs)):(elimina dj t)


-- | Função que refaz o mapa, de acordo com a distância do jogador.
eliminaAux :: Double -- ^ Distância do jogador
           -> Pista -- ^ Pista recebida
           -> Pista
eliminaAux dj [] = []
eliminaAux dj (x:xs)
    | dj<=1 = (x:xs)
    | otherwise = eliminaAux (dj-1) xs


-- | Função que atribui valores a cada piso.
valo :: Peca -- ^ Peça que recebe
     -> Int -- ^ Valor dado
valo (Recta piso _)
    | piso == Terra = 1
    | piso == Relva = 2
    | piso == Lama = 3
    | piso == Boost = 0
    | otherwise = 4
valo (Rampa piso _ _)
    | piso == Terra = 1
    | piso == Relva = 2
    | piso == Lama = 3
    | piso == Boost = 0
    | otherwise = 4


-- | Função que encontra a posição da lista de peças. 
-- Essa posição é a pista para onde ele vai/está.
encontrapeca :: Int -- ^ Valor menor
             -> [Int] -- ^ Lista de peças 
             -> Int -- ^ Posição na lista de peças 
encontrapeca x (h:t) 
   | x==h = 0
   | otherwise = 1+(encontrapeca x t)