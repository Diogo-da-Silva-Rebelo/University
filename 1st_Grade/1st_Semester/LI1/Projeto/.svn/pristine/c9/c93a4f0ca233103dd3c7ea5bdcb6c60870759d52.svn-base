-- | Este módulo define funções comuns da Tarefa 5 do trabalho prático.
module Main where

import LI11920
import Tarefa1_2019li1g009
import Tarefa6_2019li1g009
import Graphics.Gloss
import Graphics.Gloss.Juicy
import Graphics.Gloss.Interface.Pure.Game
import Graphics.Gloss.Data.Bitmap


type EstadoGloss = (Float,Float,[Picture])

-- | Função principal da Tarefa 5.
--
-- __NB:__ Esta Tarefa é completamente livre. Deve utilizar a biblioteca <http://hackage.haskell.org/package/gloss gloss> para animar o jogo, e reutilizar __de forma completa__ as funções das tarefas anteriores.

estadoInicial :: [Picture] -> EstadoGloss
estadoInicial z = (0,0,z)


mapapapa :: Mapa
mapapapa = (gera 2 2 2)

desenhaEstado :: EstadoGloss -> Picture
desenhaEstado (x,y,[principal]) = Pictures [principal]
desenhaEstado (x,y,[principal,z,ret,rer,rel,rec,reb,rat,rar,ral,rac,rab,raat,raar,raal,raac,raab]) = Pictures mapaa
 where mapaa = (drawMapa mapapapa x y [ret,rer,rel,rec,reb,rat,rar,ral,rac,rab,raat,raar,raal,raac,raab])
 

reageEvento :: Event -> EstadoGloss -> EstadoGloss
reageEvento (EventKey (SpecialKey KeyUp)    Down _ _) (x,y,p) = (x,y+10,p)
reageEvento (EventKey (SpecialKey KeyDown)  Down _ _) (x,y,p) = (x,y-10,p)
reageEvento (EventKey (SpecialKey KeyLeft)  Down _ _) (x,y,p) = (x-10,y,p)
reageEvento (EventKey (SpecialKey KeyRight) Down _ _) (x,y,p) = (x+10,y,p)
reageEvento _ e = e 


drawMapa :: Mapa -> Float -> Float -> [Picture] -> [Picture]
drawMapa [] _ _ _ = []
drawMapa ((h:hs):t) x y pecas = (drawLinha (h:hs) x y pecas)++(drawMapa t x (y-13) pecas)


drawLinha :: [Peca] -> Float -> Float -> [Picture] -> [Picture]
drawLinha [] _ _ _ = []
drawLinha (h:t) x y pecas = (drawPeca h x y pecas) ++ (drawLinha t x (y+13) pecas)


drawPeca :: Peca -> Float -> Float -> [Picture] -> [Picture]
drawPeca p x y [ret,rer,rel,rec,reb,rat,rar,ral,rac,rab,raat,raar,raal,raac,raab]
    | encontraMapaAux2 p (Recta Terra 0) = [Translate x y ret]
    | encontraMapaAux2 p (Recta Relva 0) = [Translate x y rer]
    | encontraMapaAux2 p (Recta Lama 0) = [Translate x y rel]
    | encontraMapaAux2 p (Recta Cola 0) = [Translate x y rec]
    | encontraMapaAux2 p (Recta Boost 0) = [Translate x y reb]
    | encontraMapaAux2 p (Recta Terra 1) = [Translate x y ret]
    | encontraMapaAux2 p (Recta Relva 1) = [Translate x y rer]
    | encontraMapaAux2 p (Recta Lama 1) = [Translate x y rel]
    | encontraMapaAux2 p (Recta Cola 1) = [Translate x y rec]
    | encontraMapaAux2 p (Recta Boost 1) = [Translate x y reb]
    | encontraMapaAux2 p (Recta Terra 2) = [Translate x y ret]
    | encontraMapaAux2 p (Recta Relva 2) = [Translate x y rer]
    | encontraMapaAux2 p (Recta Lama 2) = [Translate x y rel]
    | encontraMapaAux2 p (Recta Cola 2) = [Translate x y rec]
    | encontraMapaAux2 p (Recta Boost 2) = [Translate x y reb]
    | encontraMapaAux2 p (Rampa Terra 0 1) = [Translate x y rat]
    | encontraMapaAux2 p (Rampa Relva 0 1) = [Translate x y rar]
    | encontraMapaAux2 p (Rampa Lama 0 1) = [Translate x y ral]
    | encontraMapaAux2 p (Rampa Cola 0 1) = [Translate x y rac]
    | encontraMapaAux2 p (Rampa Boost 0 1) = [Translate x y rab]
    | encontraMapaAux2 p (Rampa Terra 1 2) = [Translate x y rat]
    | encontraMapaAux2 p (Rampa Relva 1 2) = [Translate x y rar]
    | encontraMapaAux2 p (Rampa Lama 1 2) = [Translate x y ral]
    | encontraMapaAux2 p (Rampa Cola 1 2) = [Translate x y rac]
    | encontraMapaAux2 p (Rampa Boost 1 2) = [Translate x y rab] 
    | encontraMapaAux2 p (Rampa Terra 0 2) = [Translate x y raat]
    | encontraMapaAux2 p (Rampa Relva 0 2) = [Translate x y raar]
    | encontraMapaAux2 p (Rampa Lama 0 2) = [Translate x y raal]
    | encontraMapaAux2 p (Rampa Cola 0 2) = [Translate x y raac]
    | encontraMapaAux2 p (Rampa Boost 0 2) = [Translate x y raab]


reageTempo :: Float -> EstadoGloss -> EstadoGloss
reageTempo n (x,y,z) = (x,y,z)


fr :: Int
fr = 60


dm :: Display
dm = InWindow "ExciteBike Haskell" (1200,999) (10,10) 



main :: IO ()
main = do Just principal <- loadJuicy "Imagens/Background.png"
          Just z <- loadJuicy "Imagens/Bola.jpg"
          Just ret <- loadJuicy "Imagens/Pecas/TERRA.png"
          Just rer <- loadJuicy "Imagens/Pecas/RELVA.png"
          Just rel <- loadJuicy "Imagens/Pecas/LAMA.png"
          Just rec <- loadJuicy "Imagens/Pecas/COLA.png"
          Just reb <- loadJuicy "Imagens/Pecas/BOOST.png"
          Just rat <- loadJuicy "Imagens/Pecas/TERRA 0 1.png"
          Just rar <- loadJuicy "Imagens/Pecas/RELVA 0 1.png"
          Just ral <- loadJuicy "Imagens/Pecas/LAMA 0 1.png"
          Just rac <- loadJuicy "Imagens/Pecas/COLA 0 1.png"
          Just rab <- loadJuicy "Imagens/Pecas/BOOST 0 1.png"
          Just raat <- loadJuicy "Imagens/Pecas/TERRA 0 2.png"
          Just raar <- loadJuicy "Imagens/Pecas/RELVA 0 2.png"
          Just raal <- loadJuicy "Imagens/Pecas/LAMA 0 2.png"
          Just raac <- loadJuicy "Imagens/Pecas/COLA 0 2.png"
          Just raab <- loadJuicy "Imagens/Pecas/BOOST 0 2.png"
          play dm         -- janela onde irá correr o jogo
               (greyN 0.5)    -- côr do fundo da janela
               fr              -- frame rate
               (estadoInicial [principal,(scale 0.15 0.15 z)]) -- estado inicial
               desenhaEstado   -- desenha o estado do jogo
               reageEvento     -- reage a um evento
               reageTempo      -- reage ao passar do tempo