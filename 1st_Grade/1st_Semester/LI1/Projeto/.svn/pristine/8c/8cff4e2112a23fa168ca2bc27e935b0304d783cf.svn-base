-- | Este módulo define funções comuns da Tarefa 2 do trabalho prático.
module Tarefa2_2019li1g009 where

import LI11920
import Tarefa0_2019li1g009
import Tarefa1_2019li1g009

-- * Testes

-- | Testes unitários da Tarefa 2.
--
-- Cada teste é um triplo (/identificador do 'Jogador'/,/'Jogada' a efetuar/,/'Estado' anterior/).
testesT2 :: [(Int,Jogada,Estado)]
testesT2 = [a,b,c,d,e,u,v,w,x,y,z]
    where a = (1,(Movimenta B),(Estado (gera 2 4 5) [(Jogador 1 2 3 2 (Morto (1))),(Jogador 0 1 3 2 (Chao True))]))
          b = (1,(Movimenta B),(Estado (gera 2 4 5) [(Jogador 1 (2.5) 3 3 (Chao True)),(Jogador 2 2 3 2 (Chao True))]))
          c = (0,(Movimenta C),(Estado (gera 2 3 4) [(Jogador 0 (2.9) 3 2 (Chao True)),(Jogador 0 0 3 2 (Chao True))]))
          d = (1,(Movimenta C),(Estado (gera 2 2 4) [(Jogador 0 (0.5) 3 2 (Ar 7 15 2)),(Jogador 1 1 3 2 (Chao True))]))
          u = (1,(Acelera),(Estado (gera 3 5 1) [(Jogador 3 (1.7) 3 2 (Morto (1))),(Jogador 0 4 3 2 (Chao False)),(Jogador 0 5 3 2 (Morto (0.5)))]))
          v = (1,(Desacelera),(Estado (gera 3 1 8) [(Jogador 1 (0.6) 3 2 (Ar 2 10 2)),(Jogador 0 (0.3) 3 2 (Chao True)),(Jogador 0 (0.5) 3 2 (Chao False))]))
          w = (0,(Dispara),(Estado (gera 2 6 3) [(Jogador 0 (4.1) 3 2 (Chao True)),(Jogador 0 5 3 2 (Chao True))]))
          x = (1,(Dispara),(Estado (gera 4 2 5) [(Jogador 2 (1.9) 3 2 (Morto (1))),(Jogador 0 0 3 2 (Chao True)),(Jogador 0 1 3 2 (Chao True))]))
          y = (2,(Dispara),(Estado (gera 3 3 4) [(Jogador 4 (2.5) 3 2 (Morto (1))),(Jogador 0 1 3 2 (Chao True)),(Jogador 1 (2.5) 3 2 (Ar 6 30 10))]))
          z = (2,(Dispara),(Estado (gera 3 6 9) [(Jogador 1 (4.7) 3 2 (Morto (1))),(Jogador 0 5 5 2 (Chao True)),(Jogador 2 (4.7) 3 0 (Chao True))]))
          e = (0,(Movimenta D),(Estado (gera 1 3 8) [(Jogador 0 (2.7) 3 2 (Ar 10 10 5))]))
          

encontrapista :: Int -> Mapa -> Pista
encontrapista i [] = []
encontrapista i ((x:xs):t) =
    if i==0 then (x:xs)
    else encontrapista (i-1) (t)

-- Função que altera a peça, quando o jogador dispara.
-- Apenas altera o piso, ou seja, a peça continua a ser Recta ou Rampa
alteraPeca :: Peca -> Peca
alteraPeca (Recta piso x) = Recta Cola x
alteraPeca (Rampa piso x y) = Rampa Cola x y


-- Função que verifica se o jogador está no Ar.
-- Se sim, é True. Caso contrário, é False.
estaAr :: Int -> [Jogador] -> Bool
estaAr _ [] = False
estaAr x ((Jogador pj dj vj cj (Chao acj)):xs) = False
estaAr x ((Jogador pj dj vj cj (Morto tj):xs)) = False
estaAr x ((Jogador pj dj vj cj (Ar aj ij gj)):xs)
    | x==0 = True
    | otherwise = (estaAr (x-1) xs)


-- Função que altera o EstadoJogador do Jogador, diminuindo a sua inclinação.
-- Só existe um caso: quando o jogador está no Ar.
-- j é o jogador. Ex.: Se j=0, então é o primeiro jogador da lista.
movimentaD :: Int -> [Jogador] -> [Jogador]
movimentaD _ [] = []
movimentaD j ((Jogador pj dj vj cj (Ar aj ij gj)):xs)
    | j==0 && (ij-15)>=(-90) = ((Jogador pj dj vj cj (Ar aj (ij-15) gj)):xs)
    | j==0 && (ij-15)<=(-90) = ((Jogador pj dj vj cj (Ar aj (-90) gj)):xs)
    | otherwise = (Jogador pj dj vj cj (Ar aj ij gj)):(movimentaD (j-1) xs)
   

-- Função que faz o mesmo que a movimentaD.
-- Só existe um caso, quando o jogador está no Ar.
-- Contudo, esta função aumenta a inclinação do jogador.
movimentaE :: Int -> [Jogador] -> [Jogador]
movimentaE _ [] = []
movimentaE j ((Jogador pj dj vj cj (Ar aj ij gj)):xs)
    | j==0 && (ij+15)<=(90) = ((Jogador pj dj vj cj (Ar aj (ij+15) gj)):xs)
    | j==0 && (ij+15)>=(90) = ((Jogador pj dj vj cj (Ar aj (90) gj)):xs)
    | otherwise = (Jogador pj dj vj cj (Ar aj ij gj)):(movimentaE (j-1) xs)


-- Função que verifica se o jogador está no Chao.
-- Se sim, é True. Caso contrário, é False.
-- x é o identificador do jogador.
estaChao :: Int -> [Jogador] -> Bool
estaChao _ [] = False
estaChao j ((Jogador pj dj vj cj (Chao acj)):xs)
    | j==0 = True
    | otherwise = (estaChao (j-1) xs)
estaChao j ((Jogador pj dj vj cj (Morto tj):xs)) = False
estaChao j ((Jogador pj dj vj cj (Ar aj ij gj)):xs) = False


mixTudoC :: Int -> Mapa -> [Jogador] -> [Jogador]
mixTudoC j m [] = []
mixTudoC j m ((Jogador pj dj vj cj ej):xs)
    | j==0 && pj==0 = ((Jogador pj dj vj cj ej):xs)
    | j==0 && pj>0 && (dA)<=(2/10) && (dA)>=(-2/10) = ((Jogador (pj-1) dj vj cj ej):xs)
    | j==0 && pj>0 && (dA)>(2/10) && (dA)<(-2/10) && (qa)<(qpe) = ((Jogador pj dj vj cj (Morto 1.0)):xs)
    | j==0 && pj>0 && (dA)>(2/10) && (dA)<(-2/10) && (qa)>(qpe) = ((Jogador (pj-1) dj vj cj (Ar (qa) (inc (oe)) 0)):xs)
    | otherwise = ((Jogador pj dj vj cj ej):(mixTudoC (j-1) m xs))

   where dA = difA j m ((Jogador pj dj vj cj ej):xs)
         qa = qalturaj (ondeestas j m ((Jogador pj dj vj cj ej):xs))
         oe = ondeestas j m ((Jogador pj dj vj cj ej):xs)
         qpe = qalturaj (qpeca (pj-1) (floor dj) m)


-- Função que calcula a diferença de alturas.
difA :: Int -> Mapa -> [Jogador] -> Double
difA j m [] = 0
difA j m ((Jogador pj dj vj cj ej):xs) 
    | j==0 = (qa-qac)
    | otherwise = difA (j-1) m (xs)

 where qa = qalturaj (ondeestas j m ((Jogador pj dj vj cj ej):xs))
       qac = qalturaj (qpeca (pj-1) (floor dj) m)


-- Função que determina a altura do jogador
qalturaj :: Peca -> Double
qalturaj (Recta piso x) = (fromIntegral x)
qalturaj (Rampa piso x y) = ((fromIntegral y)-(fromIntegral x))


-- Função que determina a peça onde o jogador está.
-- j == jogador
ondeestas :: Int -> Mapa -> [Jogador] -> Peca
ondeestas j ((x:t):ts) ((Jogador pj dj vj cj ej):xs)
    | j==0 && pj==0 && dj>=0 && dj<=1 = x
    | j==0 && pj==0 && dj>1 = ondeestas j ((t):ts) ((Jogador pj (dj-1) vj cj ej):xs)
    | j==0 && pj>0 = ondeestas j (ts) ((Jogador (pj-1) dj vj cj ej):xs)
    | otherwise = ondeestas j ((x:t):ts) (xs) 
   


-- Função que determina a peça da pista acima da do jogador
-- p = pista ; dj = distância do jogador
qpeca :: Int -> Int -> Mapa -> Peca
qpeca p dj [] = (Recta Terra 0)
qpeca p dj ((x:xs):t)
    | p==1 && dj<=1 = x
    | p==1 && dj>1 = qpeca p (dj-1) ((xs):t)
    | otherwise = qpeca (p-1) dj t


-- * Função que calcula a inclinação.
-- Seja x a altura inicial e y a altura final. O comprimento de uma peça é 1
-- Seja A e B dois pontos, em que A=(a;x) e B=(b;y)
-- O declive da reta que passa por estes dois pontos será dado por ((y-x)/(b-a))
-- Como o comprimento da peça é 1, (b-a)=1. 
-- Logo o declive é (y-x). A inclinação desta reta é dada pelo arctan (y-x)
inc :: Peca -> Double
inc (Recta piso x) = 0
inc (Rampa piso x y) = atan ((fromIntegral y)-(fromIntegral x))


mixTudoB :: Int -> Mapa -> [Jogador] -> [Jogador]
mixTudoB j m [] = []
mixTudoB j m ((Jogador pj dj vj cj ej):xs)
    | j==0 && pj==((findnpistas m)-1) = ((Jogador pj dj vj cj ej):xs)
    | j==0 && pj<((findnpistas m)-1) && (dA)<=(2/10) && (dA)>=(-2/10) = ((Jogador (pj+1) dj vj cj ej):xs)
    | j==0 && pj<((findnpistas m)-1) && (dA)>(2/10) && (dA)<(-2/10) && (qa)<(qpe) = ((Jogador (pj) dj vj cj (Morto 1.0)):xs)
    | j==0 && pj<((findnpistas m)-1) && (dA)>(2/10) && (dA)<(-2/10) && (qa)>=(qpe) = ((Jogador (pj+1) dj vj cj (Ar (qalturaj (oe)) (inc (oe)) 0)):xs)
    | otherwise = ((Jogador pj dj vj cj ej):(mixTudoB (j-1) m xs))

   where dA = difA j m ((Jogador pj dj vj cj ej):xs)
         qa = qalturaj (ondeestas j m ((Jogador pj dj vj cj ej):xs))
         oe = ondeestas j m ((Jogador pj dj vj cj ej):xs)
         qpe = qalturaj (qpeca (pj-1) (floor dj) m)


-- Função que encontra o número de pistas num mapa.
findnpistas :: Mapa -> Int
findnpistas [] = 0
findnpistas ((x:xs):t) = 1+(findnpistas t)


-- Função que altera o estado do jogador de Chao False para True
-- Se o estado do jogador for Chao True, o estado mantém-se
chaoTrue :: Int -> [Jogador] -> [Jogador]
chaoTrue x [] = []
chaoTrue x ((Jogador pj dj vj cj ej):xs)
    | x==0 = ((Jogador pj dj vj cj (Chao True)):xs)
    | otherwise = chaoTrue (x-1) (xs)


-- Função que altera o estado do jogador de Chao True para False
-- Se o estado do jogador for Chao False, o estado mantém-se
chaoFalse :: Int -> [Jogador] -> [Jogador]
chaoFalse x [] = []
chaoFalse x ((Jogador pj dj vj cj ej):xs)
    | x==0 =((Jogador pj dj vj cj (Chao False)):xs)
    | otherwise = chaoFalse (x-1) (xs)


alteraCola :: Int -> [Jogador] -> [Jogador]
alteraCola x ((Jogador pj dj vj cj ej):xs)
    | x==0 && cj>0 && dj>=1 = ((Jogador pj dj vj (cj-1) ej):xs)
    | x==0 && cj>0 && dj<1 = ((Jogador pj dj vj cj ej):xs)
    | x==0 && cj==0 = ((Jogador pj dj vj cj ej):xs)
    | otherwise = ((Jogador pj dj vj cj ej):(alteraCola (x-1) xs))

-- * Funções principais da Tarefa 2.
-- | Efetua uma jogada.
-- * jogada x D : diminui 15 graus a inclinação do jogador.
-- / Primeiramente verifica se x==1, depois se está no Ar, e, se tudo estiver correto, altera.

-- * jogada x E : diminui 15 graus a inclinação do jogador.
-- / Primeiramente verifica se x==1, depois se está no Ar, e, se tudo estiver correto, altera.

-- * jogada x C : jogador sobe de pista.
-- / Primeiramente verifica se x==1, depois se está no chão e 
-- / se o módulo das diferenças de altura é menor que 0.2. Se tudo estiver correto, muda de pista.

-- * jogada x B : jogador sobe de pista.
-- / Primeiramente verifica se x==1, depois se está no chão e 
-- / se o módulo das diferenças de altura é menor que 0.2. Se tudo estiver correto, muda de pista.

-- m=mapa ; pj=pistaJogador ; dj=distanciaJogador ; 
-- vj=velocidadeJogador ; cj=colajogador ; ej=estadoJogador ;
-- aj=alturajogador ; ij=inclinaçãojogador ; gj=gravidadeJogador ;
-- tj=timeoutJogador ; acj=aceleraJogador.

jogada :: Int -- ^ O identificador do 'Jogador' que efetua a jogada.
       -> Jogada -- ^ A 'Jogada' a efetuar.
       -> Estado -- ^ O 'Estado' anterior.
       -> Estado -- ^ O 'Estado' resultante após o jogador efetuar a jogada.
jogada _ _ (Estado m []) = (Estado m [])
jogada x (Movimenta D) (Estado m (j:js)) =
    if x==0
    then if estaAr x (j:js) == True
         then (Estado m (movimentaD x (j:js)))
         else (Estado m (j:js))
    else if estaAr (x-1) (js) == True
         then (Estado m (j:(movimentaD (x-1) js)))
    else (Estado m (j:js))
jogada x (Movimenta E) (Estado m (j:js)) =
    if x==0 
    then if estaAr x (j:js) == True
         then (Estado m (movimentaE x (j:js)))
         else (Estado m (j:js))
    else if estaAr (x-1) (js) == True
         then (Estado m (j:(movimentaE (x-1) js)))
    else (Estado m (j:js))
jogada x (Movimenta C) (Estado m ((Jogador pj dj vj cj ej):xs)) =
    if estaChao x ((Jogador pj dj vj cj ej):xs)==True
    then (Estado m (mixTudoC x m ((Jogador pj dj vj cj ej):xs)))
    else (Estado m ((Jogador pj dj vj cj ej):xs))
jogada x (Movimenta B) (Estado m ((Jogador pj dj vj cj ej):xs)) =
    if estaChao x ((Jogador pj dj vj cj ej):xs)==True
    then (Estado m (mixTudoB x m ((Jogador pj dj vj cj ej):xs)))
    else (Estado m ((Jogador pj dj vj cj ej):xs))
jogada x (Acelera) (Estado m ((Jogador pj dj vj cj ej):xs)) =
    if estaChao x ((Jogador pj dj vj cj ej):xs)==True
    then (Estado m (chaoTrue x ((Jogador pj dj vj cj ej):xs)))
    else (Estado m ((Jogador pj dj vj cj ej):xs))
jogada x (Desacelera) (Estado m ((Jogador pj dj vj cj ej):xs)) =
    if estaChao x ((Jogador pj dj vj cj ej):xs)==True
    then (Estado m (chaoFalse x ((Jogador pj dj vj cj ej):xs)))
    else (Estado m ((Jogador pj dj vj cj ej):xs))
jogada x (Dispara) (Estado m ((Jogador pj dj vj cj ej):xs)) =
    if estaChao x ((Jogador pj dj vj cj ej):xs)==True
    then Estado apm (alteraCola x ((Jogador pj dj vj cj ej):xs))
    else (Estado m ((Jogador pj dj vj cj ej):xs))

 where apm = atualizaPosicaoMatriz (x,(floor dj)) (alteraPeca (encontraPosicaoMatriz (x,(floor dj)) m)) m
