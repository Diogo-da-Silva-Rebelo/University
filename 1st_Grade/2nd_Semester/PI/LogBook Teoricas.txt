Conceitos gerais:

PI T - 2 mar
- Conceito de memória:

int maximo (int a, int b){
if (a>b) return a;
else return b;

// return a>b ? a:b;

// if (x>y) y = x;
//return y;
}

- Pretende-se uma função que calcula o max e o min e que os retorna para o main, consoante o que se queira.
- Há comunicação com a main, quando na main é chamada a nossa função.
- Podiamos criar um struct com um par de numeros e esta função retornava esse par.
- Em máquina, cada variável está num endereço em memória.
- Com esta informação podemos criar apontadores para cada variável.
- & x : sendo x uma variável, significa o endereço de memoria onde está guardado x.
- * a : sendo a um endereço de memória, significa o conteúdo da memória no endereço a.

//SEM APONTADORES
void maxMin (int a, int b){
int t;
if (x<y) {
t = x;
x = y;
y = t;

}

//COM APONTADORES
void maxMin (int *a, int *b){
int t;
if (x<y) {
t = *x;
*x = *y;
*y = t;

}

int main(){
int x = 3, y = 6, z;
int *a;

/*
a = & x; o a passa a apontar para o endereço do x.
(*a)++; //ir ao conteúdo de a e incrementar em 1.
z = *a; //o z passa a ser o conteúdo de a.

//z= maximo(x,y)
*/

maxMin (&x,&y);
printf ("%d %d\n", x,y);
return 0;
}

- Invocação de uma função: leva a aque se crie uma nova zona memória para a função que é chamada!
- Vamos empilhando na stack estas zonas de memória. Quando deixamos de precisar da função, regressamos ao ponto onde
estavamos do main e a zona de memória acaba por "desaparecer", não tendo acesso a ela.
- O nome das variáveis não está em causa, pois há cópia de valores do main para a função, as duas funções até podem
ter as variáveis iguais, mas elas só têm nomes iguais, de resto continuam diferentes!!
- Assim, aquilo que uma função chamada recebe são VALORES, CÓPIAS.
- A estratégia na troca de valores é guardar numa variável temporario o valor de um deles.
- Há uma função swap que é muito conhecida por fazer isso, mas com apontadores.
- Ao usarmos apontadores, os valores são alterados na própria função!!
- A outra função apenas vai mexer nas coisas que estão a ser apontadas!


PI T - 4 mar
- Introdução aos arrays. Os arrays são constituidos por vários elementos, onde cada índice ou posição é acedida atráves
de um número começado na posição 0, sempre.
- Se a dimensão de um array é 10, temos posições de 0 a 9.
- A contagem é feito sempre no final do ciclo.
- índices num array: i = N-1.
- Quando definimos um array, temos de definir obrigatoriamente a dimensão deste array, ou seja, quando este se declara.
- Se não dissermos a dimensão do array, o C pode calcular e determinar através da sintaxe:

    y[]={1,2,3,4,5,6,7,8,9} // dimensão 10

- Função que copia array:

    -> É um procedimento, não calcula nada, só funciona!

void copiaArray (int destino[], int origem[], int N) {
    for (int i = 0; i<10 ; i++) destino[i] = origem[i];
    return;
}

-> Note-se que na função anterior, quando passamos os arrays, não estamos a passar efetivamente o array, mas sim,
um apontador para a primeira posição do array, passando o seu endereço!
-> É escusado dizermos que array(&a,&b), pois o b já é por si um endereço, não sendo preciso voltar a especificá-lo.

int main() {
    int i, y [10] = {1,2,3,4,5,6,7,8,9,10}, b[10];
    int *p;
    int a;
    a = 42;
    p = a; // p fica com 42, mas 42 não é um endereço válido
    p = &a; // p fica a apontar para o endereço apontado por a
    p = b; // p fica a apontar para o endereço b

    copiaArray(b,y, 10);
    return 0;
}

/* Em C um array é o endereço da sua primeira componente, ou seja, o que guardamos no y é de facto o endereço já!!
 * Os arrays são endereços!!!!
 */

PI T - 9 mar

...- Alguns modificadores:
...- int x // na maioria das vezes é um inteiro em 4 bytes - 2^32 inteiros
...        // -2^n-1 até 2^n-1
...
...- unsigned int x // no fundo é inteiro em complemento para 2 (gama: 0 até 2^n-1 -1)
...- long int x // na maioria das vezes é um inteiro representado em 8 bytes - 2^64 inteiros
...- unsigned long int x // 64 bits todos usados para representar números positivos
...- short int x // inteiro com 2 bytes
...
...- # Define MAX (a,b) (a>b?a:b) // Sempre que aparecer uma expressão MAX, o compilador substitui pelo que está à frente.

- A ideia de tipar a memória faz muito sentido, porque tipos diferentes ocupam um espaço diferente em mem.

//soma dos elementos de um array
int sum (int v[], int N) {
int i, x;

i=sizeof(v);

for (i=x=0; i<N; i++)
    x += a[i];

    return x;
    }

//função principal
int main() {
int a[10] = {1,2,3,4,5,6,7,8,9,0} //posição de memória válida, que já definimos

int s = 45;

float f = 4.5

//São coisas diferentes !!
s = s / 2; //divisão inteira
f = f / 2 //divisão de floats

int *b; //posição de memória inválida, pois não está definida, nem temos acesso à mesma, não é nossa. Dá SIG!
long int *c

s = sizeof (a); //10x4 = 40
s = sizeof (int); //4
s = sizeof (long int); //8
s = sizeof (b); //8

b = a; //b aponta para a primeira posição de a.
b = a+3 //b aponta para o índice 3 do array (3 inteiros/índices) para a frente

c = a;
c = c+a; //avançar 3 long int's: assim a operação b=a+3 != c=a+3 (pois os tipos de dados são diferentes!) 3 long int's = 6 int's
//Assim estamos no caso de c a avançar mais 3 casas que avancamos em b.

s = sum (a,10);
//s = sum (b,10);

//OBS. a função sum, como leva o índice 3, vai depois de percorrer o array, continuar, acabando por aceder a coisas na
mem desconhecidas! Dando SIG!
return 0;
}

PI T - 16 mar
- Procura de um elemento num array

//sem ordenação
int procura1 (int x, int v[], int N){
    //retorna o índice onde x ocorre em v;
    //se não existir, retorna -1;

    for (int i=0; i<N; i++)
        if (v[i] == x) return i;
    return -1;
}

int procura2 (int x, int v[], int N){
    //retorna o índice onde x ocorre em v;
    //se não existir, retorna -1;

    int i=0;
    while(i<N && v[i]!= x) i++;
    if (i!=N) return i;
    else return -1;
}

//com ordenação
int procura_Ordenada (int x, int v[], int N){
    //retorna o índice onde x ocorre em v;
    //se não existir, retorna -1;

     while(i<N && v[i] < x) i++;
     if (i < N && v[i] == x) return i;
     else return -1;
}

//procura binária
int procuraB (int x, int v[], int N){
    //v está ordenado
    return (procuraEntre(x, v, N, 0, N-1));
}

//função auxíliar
int procuraEntre (int x, int v[], int N, int a, int b){
    //procura x em v[] entre os índices a e b
    int meio;
    int r;
    if (b > a) r = -1;
    else {
        meio = (a+b)/2;
        if(v[meio]==x) r= meio;
        else if(v[meio]>x) r = procuraEntre(x,v,N,a,meio-1);
        else r = procuraEntre(x,v,N,meio+1,b);
    }
    return r;
}

//Função semelhante Às 2 anteriores, mais compacta e sem auxiliar
int procuraB2 (int x, int v[], int N){
    int r, meio;
    if (N==0) r = -1;
    else{
        meio = N/2;
        if(v[meio]==x) r = meio;
        else if (v[meio] > x) r = procuraB2(x,v,meio);
        else if r = meio + 1 + procuraB2(x,v,v+meio+1,N-meio-1);
    }
}

PI T - 18 mar

- Forma mais fácil de ordenar array:
    -> Array com N elementos;
    -> Saber a posição do menor elemento (posição 0);
    -> Aplicar recursivamente a v+1;

//ordenação de um array
void ordenaR (int v[], int N){
    int m, i;
    if (N > 1) {
    //descobrir o índice do menor elemento
      m = 0;
      for (i=1; i<N;i++){
      if (v[i] < v[m]) m=i;
      swap (v,0,m);
      }
      ordenaR (v+1, N-1);
    }

}

void minSort (int v[], int N){
    int m, i, j;
    for (j=0, j < N-1; j++){
    //descobrir o menor elemento desde j até N
    }
    m = j;
        for (i=j+1; i<N; i++){
            if (v[i] < v[m]) m=i;
        swap (v,j,i);
        }
    }
}

void selSort (int v[], int N){
    int i, j;

    for (j=0; j<N-1; j++){
        for (i = j+1; i<N;i++){
            if (v[i] < v[j] ) swap(v,i,j);
        }
    }
}

//Coloca no fim o maior elemento!
void bubble (int v[], int N){
    int i;

    for (i=0;i<N-1; i++)
        if (v[i] > v[i+1]) swap (v,i,i+1);
}

void bubbleSort (int v[], int N) {
    int i;
    for (i=0;i<N;i++)
        bubble(v,N);
}