<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="listas_8c" kind="file" language="C++">
    <compoundname>listas.c</compoundname>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes refid="listas_8h" local="yes">listas.h</includes>
    <incdepgraph>
      <node id="3">
        <label>stdlib.h</label>
      </node>
      <node id="1">
        <label>listas.c</label>
        <link refid="listas_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>listas.h</label>
        <link refid="listas_8h"/>
      </node>
      <node id="2">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
      <sectiondef kind="func">
      <memberdef kind="function" id="listas_8c_1ae3b99323b6f8f35d80bb69ff1a27985e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="listas_8h_1a853ddea61d450761bc94933207e4833d" kindref="member">LISTA</ref></type>
        <definition>LISTA criar_lista</definition>
        <argsstring>()</argsstring>
        <name>criar_lista</name>
        <briefdescription>
<para>Função que cria uma lista. </para>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>Uma lista. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.c" line="8" column="7" bodyfile="listas.c" bodystart="8" bodyend="12"/>
      </memberdef>
      <memberdef kind="function" id="listas_8c_1af90a7ac214fd566bfb7288d744c94185" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* devolve_cabeca</definition>
        <argsstring>(LISTA l)</argsstring>
        <name>devolve_cabeca</name>
        <param>
          <type><ref refid="listas_8h_1a853ddea61d450761bc94933207e4833d" kindref="member">LISTA</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Função que devolve a cabeça da lista. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Valor que estava na cabeça. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.c" line="15" column="7" bodyfile="listas.c" bodystart="15" bodyend="17"/>
      </memberdef>
      <memberdef kind="function" id="listas_8c_1a9cf9ab6cac1a50979776c589aee90b51" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="listas_8h_1a853ddea61d450761bc94933207e4833d" kindref="member">LISTA</ref></type>
        <definition>LISTA insere_cabeca</definition>
        <argsstring>(LISTA l, void *val)</argsstring>
        <name>insere_cabeca</name>
        <param>
          <type><ref refid="listas_8h_1a853ddea61d450761bc94933207e4833d" kindref="member">LISTA</ref></type>
          <declname>l</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>val</declname>
        </param>
        <briefdescription>
<para>Função que insere um valor na cabeça da lista. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista; </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>*val</parametername>
</parameternamelist>
<parameterdescription>
<para>Valor que vai ser colocado na cabeça da lista. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Lista alterada. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.c" line="20" column="7" bodyfile="listas.c" bodystart="20" bodyend="25"/>
      </memberdef>
      <memberdef kind="function" id="listas_8c_1a7e919af230d184128c5465451ea64a79" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int lista_esta_vazia</definition>
        <argsstring>(LISTA l)</argsstring>
        <name>lista_esta_vazia</name>
        <param>
          <type><ref refid="listas_8h_1a853ddea61d450761bc94933207e4833d" kindref="member">LISTA</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Função que verifica se a lista está vazia. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Verdadeiro ou falso. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.c" line="28" column="5" bodyfile="listas.c" bodystart="28" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="listas_8c_1affb39e37aef63ab00b6df8f9336f6673" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="listas_8h_1a853ddea61d450761bc94933207e4833d" kindref="member">LISTA</ref></type>
        <definition>LISTA proximo</definition>
        <argsstring>(LISTA l)</argsstring>
        <name>proximo</name>
        <param>
          <type><ref refid="listas_8h_1a853ddea61d450761bc94933207e4833d" kindref="member">LISTA</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Função que devolve a cauda da lista. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A lista inicial mas sem a cabeça. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.c" line="33" column="7" bodyfile="listas.c" bodystart="33" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="listas_8c_1a18d863cdb6eb3e2ede74559c4d70b4e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="listas_8h_1a853ddea61d450761bc94933207e4833d" kindref="member">LISTA</ref></type>
        <definition>LISTA remove_cabeca</definition>
        <argsstring>(LISTA l)</argsstring>
        <name>remove_cabeca</name>
        <param>
          <type><ref refid="listas_8h_1a853ddea61d450761bc94933207e4833d" kindref="member">LISTA</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Função que remove a cabeça da lista (libertando o espaço ocupado) e devolve a cauda da lista. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A lista inicial mas sem a cabeça. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.c" line="38" column="7" bodyfile="listas.c" bodystart="38" bodyend="42"/>
      </memberdef>
      <memberdef kind="function" id="listas_8c_1a7daf2472369dc2617e86e90118cc01e6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int tamanho_lista</definition>
        <argsstring>(LISTA l)</argsstring>
        <name>tamanho_lista</name>
        <param>
          <type><ref refid="listas_8h_1a853ddea61d450761bc94933207e4833d" kindref="member">LISTA</ref></type>
          <declname>l</declname>
        </param>
        <briefdescription>
<para>Função que calcula o tamanho da lista. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>l</parametername>
</parameternamelist>
<parameterdescription>
<para>Lista. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>O tamanho. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="listas.c" line="45" column="5" bodyfile="listas.c" bodystart="45" bodyend="49"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Ficheiro com funções das listas </para>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"></codeline>
<codeline lineno="4"><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="listas_8h" kindref="compound">listas.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"><ref refid="structnodo" kindref="compound">LISTA</ref><sp/><ref refid="listas_8c_1ae3b99323b6f8f35d80bb69ff1a27985e" kindref="member">criar_lista</ref>()<sp/>{</highlight></codeline>
<codeline lineno="9"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnodo" kindref="compound">LISTA</ref><sp/>l<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structnodo" kindref="compound">NODO</ref>));</highlight></codeline>
<codeline lineno="10"><highlight class="normal"><sp/><sp/><sp/><sp/>l-&gt;<ref refid="structnodo_1ae15731225441a940966b5d6ce32c23f5" kindref="member">valor</ref>=<sp/>NULL;</highlight></codeline>
<codeline lineno="11"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l;</highlight></codeline>
<codeline lineno="12"><highlight class="normal">}</highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<sp/><ref refid="listas_8c_1af90a7ac214fd566bfb7288d744c94185" kindref="member">devolve_cabeca</ref>(<ref refid="structnodo" kindref="compound">LISTA</ref><sp/>l)<sp/>{</highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l-&gt;<ref refid="structnodo_1ae15731225441a940966b5d6ce32c23f5" kindref="member">valor</ref>;</highlight></codeline>
<codeline lineno="17"><highlight class="normal">}</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"><ref refid="structnodo" kindref="compound">LISTA</ref><sp/><ref refid="listas_8c_1a9cf9ab6cac1a50979776c589aee90b51" kindref="member">insere_cabeca</ref>(<ref refid="structnodo" kindref="compound">LISTA</ref><sp/>l,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*val)<sp/>{</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnodo" kindref="compound">LISTA</ref><sp/>s<sp/>=<sp/>malloc(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(<ref refid="structnodo" kindref="compound">NODO</ref>));</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structnodo_1ae15731225441a940966b5d6ce32c23f5" kindref="member">valor</ref><sp/>=<sp/>val;</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/>s-&gt;<ref refid="structnodo_1aade85d7ddbd1b14d52617be67f46f14c" kindref="member">proximo</ref><sp/>=<sp/>l;</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>s;</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="listas_8c_1a7e919af230d184128c5465451ea64a79" kindref="member">lista_esta_vazia</ref>(<ref refid="structnodo" kindref="compound">LISTA</ref><sp/>l)<sp/>{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l-&gt;<ref refid="structnodo_1ae15731225441a940966b5d6ce32c23f5" kindref="member">valor</ref><sp/>==<sp/>NULL<sp/>?<sp/>1<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><ref refid="structnodo" kindref="compound">LISTA</ref><sp/><ref refid="listas_8c_1affb39e37aef63ab00b6df8f9336f6673" kindref="member">proximo</ref>(<ref refid="structnodo" kindref="compound">LISTA</ref><sp/>l)<sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>l-&gt;<ref refid="structnodo_1aade85d7ddbd1b14d52617be67f46f14c" kindref="member">proximo</ref>;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="structnodo" kindref="compound">LISTA</ref><sp/><ref refid="listas_8c_1a18d863cdb6eb3e2ede74559c4d70b4e5" kindref="member">remove_cabeca</ref>(<ref refid="structnodo" kindref="compound">LISTA</ref><sp/>l)<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="structnodo" kindref="compound">LISTA</ref><sp/>sl<sp/>=<sp/>l-&gt;<ref refid="structnodo_1aade85d7ddbd1b14d52617be67f46f14c" kindref="member">proximo</ref>;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>free(l-&gt;<ref refid="structnodo_1ae15731225441a940966b5d6ce32c23f5" kindref="member">valor</ref>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>sl;</highlight></codeline>
<codeline lineno="42"><highlight class="normal">}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="listas_8c_1a7daf2472369dc2617e86e90118cc01e6" kindref="member">tamanho_lista</ref>(<ref refid="structnodo" kindref="compound">LISTA</ref><sp/>l)<sp/>{</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>!<ref refid="listas_8c_1a7e919af230d184128c5465451ea64a79" kindref="member">lista_esta_vazia</ref>(l);<sp/>i++,<sp/>l<sp/>=<sp/><ref refid="listas_8c_1affb39e37aef63ab00b6df8f9336f6673" kindref="member">proximo</ref>(l));</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="49"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="listas.c"/>
  </compounddef>
</doxygen>
